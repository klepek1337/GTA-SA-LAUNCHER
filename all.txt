### Zawartość pliku: .editorconfig ###
[*.cs]

# IDE0005: Using directive is unnecessary.
dotnet_diagnostic.IDE0005.severity = none


### Zawartość pliku: Form1.cs ###
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Windows.Forms;

namespace GameLauncher
{
    public partial class Form1 : Form
    {
        private List<string?> gamePaths = new List<string?>(); // Użyj nullable

        public Form1()
        {
            InitializeComponent();
            SetBackgroundImage(); // Ustawienie tła
            InitializeButtons(); // Inicjalizacja przycisków
        }

        // Metoda do ustawienia tła z pliku lokalnego
        private void SetBackgroundImage()
        {
            string backgroundPath = @"C:\Users\fulek\GameLauncher\background.jpg";

            if (File.Exists(backgroundPath))
            {
                BackgroundImage = Image.FromFile(backgroundPath);
                BackgroundImageLayout = ImageLayout.Stretch;
            }
            else
            {
                MessageBox.Show("Obrazek tła nie został znaleziony.");
            }
        }

        // Inicjalizacja przycisków
        private void InitializeButtons()
        {
            Controls.Clear(); // Usuń istniejące kontrolki, aby uniknąć duplikatów

            for (int i = 0; i < gamePaths.Count; i++)
            {
                int currentIndex = i; // Lokalne przypisanie zmiennej, aby uniknąć problemów z delegatami
                Button gameButton = new Button
                {
                    Text = gamePaths[i] != null ? Path.GetFileNameWithoutExtension(gamePaths[i]!) : $"Gra {i + 1}",
                    Location = new Point(50, 50 + (i * 60))
                };
                gameButton.Click += (sender, e) => OnGameButtonClick(currentIndex);
                Controls.Add(gameButton);
            }

            // Dodanie przycisku do dodania kolejnych gier
            Button addGameButton = new Button
            {
                Text = "Dodaj grę",
                Location = new Point(50, 50 + (gamePaths.Count * 60) + 20)
            };
#pragma warning disable CS8622 // Nullability of reference types in type of parameter doesn't match the target delegate (possibly because of nullability attributes).
            addGameButton.Click += AddMoreGames;
#pragma warning restore CS8622 // Nullability of reference types in type of parameter doesn't match the target delegate (possibly because of nullability attributes).
            Controls.Add(addGameButton);
        }

        // Funkcja obsługująca kliknięcie przycisku gry
        private void OnGameButtonClick(int index)
        {
            if (index < 0 || index >= gamePaths.Count)
            {
                MessageBox.Show("Nieprawidłowy indeks przycisku gry.");
                return;
            }

            if (!string.IsNullOrEmpty(gamePaths[index]))
            {
                LaunchGame(gamePaths[index]!); // Uruchom grę, jeśli ścieżka istnieje
            }
            else
            {
                OpenFileDialog openFileDialog = new OpenFileDialog
                {
                    Filter = "Pliki wykonywalne (*.exe, *.lnk)|*.exe;*.lnk",
                    Title = "Wybierz plik gry"
                };

                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    gamePaths[index] = openFileDialog.FileName;
                    InitializeButtons(); // Zaktualizuj przyciski
                }
            }
        }

        // Funkcja obsługująca dodanie nowych gier
        private void AddMoreGames(object sender, EventArgs e)
        {
            if (gamePaths.Count < 5) // Maksymalnie 5 gier
            {
                gamePaths.Add(null);
                InitializeButtons(); // Odśwież przyciski
            }
            else
            {
                MessageBox.Show("Osiągnięto maksymalną liczbę gier.");
            }
        }

        // Funkcja do uruchamiania gry lub skrótu
        private void LaunchGame(string gamePath)
        {
            if (File.Exists(gamePath))
            {
                try
                {
                    if (gamePath.ToLower().EndsWith(".lnk"))
                    {
                        // Jeśli to skrót, uruchom go za pomocą Process.Start()
#pragma warning disable CS8600 // Converting null literal or possible null value to non-nullable type.
                        string targetPath = GetTargetPathFromShortcut(gamePath);
#pragma warning restore CS8600 // Converting null literal or possible null value to non-nullable type.
                        if (!string.IsNullOrEmpty(targetPath) && File.Exists(targetPath))
                        {
                            Process.Start(targetPath); // Uruchom plik docelowy
                        }
                        else
                        {
                            MessageBox.Show("Nie można znaleźć pliku docelowego skrótu.");
                        }
                    }
                    else
                    {
                        Process.Start(gamePath); // Uruchom plik .exe
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Błąd podczas uruchamiania gry: {ex.Message}");
                }
            }
            else
            {
                MessageBox.Show("Plik gry nie istnieje.");
            }
        }

        // Funkcja do odczytania celu skrótu .lnk
        private string? GetTargetPathFromShortcut(string shortcutPath)
        {
            try
            {
                // Użycie Process.Start z komendą do odczytu celu skrótu
                string targetPath = string.Empty;
                var startInfo = new ProcessStartInfo
                {
                    FileName = "cmd.exe",
                    Arguments = $"/C echo|set /p={shortcutPath}|findstr /i .lnk",
                    RedirectStandardOutput = true,
                    UseShellExecute = false,
                    CreateNoWindow = true
                };

                using (var process = Process.Start(startInfo))
                {
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                    using (var reader = process.StandardOutput)
                    {
                        targetPath = reader.ReadToEnd().Trim();
                    }
#pragma warning restore CS8602 // Dereference of a possibly null reference.
                }

                return targetPath;
            }
            catch
            {
                return null;
            }
        }
    }
}


### Zawartość pliku: Form1.Designer.cs ###
﻿namespace GameLauncher
{
    partial class Form1
    {
        private System.ComponentModel.IContainer components = null;

        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        private void InitializeComponent()
        {
            this.SuspendLayout();
            // 
            // Form1
            // 
            this.ClientSize = new System.Drawing.Size(800, 450);
            this.Name = "Form1";
            this.Text = "Game Launcher";
            this.ResumeLayout(false);
        }
    }
}


### Zawartość pliku: GameLauncher.csproj ###
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net9.0-windows</TargetFramework>
    <Nullable>enable</Nullable>
    <UseWindowsForms>true</UseWindowsForms>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>

  <ItemGroup>
    <EmbeddedResource Include="background.jpg" />
  </ItemGroup>

</Project>


### Zawartość pliku: GameLauncher.csproj.user ###
﻿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="Current" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <ItemGroup>
        <Compile Update="Form1.cs">
            <SubType>Form</SubType>
        </Compile>
    </ItemGroup>
</Project>


### Zawartość pliku: GameLauncher.sln ###
﻿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.5.002.0
MinimumVisualStudioVersion = 10.0.40219.1
Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "GameLauncher", "GameLauncher.csproj", "{F52D4C5A-FFC7-4C91-A93F-073FDBC1BE51}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{F52D4C5A-FFC7-4C91-A93F-073FDBC1BE51}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{F52D4C5A-FFC7-4C91-A93F-073FDBC1BE51}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{F52D4C5A-FFC7-4C91-A93F-073FDBC1BE51}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{F52D4C5A-FFC7-4C91-A93F-073FDBC1BE51}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {B62CAAF8-7EC9-4573-8829-CEA0BF780799}
	EndGlobalSection
EndGlobal


### Zawartość pliku: Program.cs ###
using System;
using System.Windows.Forms;

namespace GameLauncher
{
    static class Program
    {
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new Form1());
        }
    }
}


