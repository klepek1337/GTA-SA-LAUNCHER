### Zawartość pliku: Form1.cs ###
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Reflection;
using System.Windows.Forms;
using System.Timers;

namespace GameLauncher
{
    public partial class Form1 : Form
    {
        private GameSettings gameSettings;
        private FlowLayoutPanel flowLayoutPanel;
        private System.Timers.Timer backgroundChangeTimer;
        private bool toggleBackground = true;

        public Form1()
        {
            InitializeComponent();

            // Tworzenie FlowLayoutPanel
            flowLayoutPanel = new FlowLayoutPanel
            {
                Dock = DockStyle.Fill,
                AutoScroll = true,
                WrapContents = true,
                FlowDirection = FlowDirection.LeftToRight,
                BackColor = Color.Transparent // Ustawienie przezroczystości
            };
            Controls.Add(flowLayoutPanel);

            // Ładujemy ustawienia gier z pliku
            gameSettings = GameSettings.LoadSettings();

            // Inicjalizujemy przyciski gier
            InitializeButtons();

            // Ustawienie tła aplikacji
            SetBackgroundImage();

            // Ustawienie ikony aplikacji na pasku zadań
            SetAppIcon();

            InitializeBackgroundChangeTimer();
        }

        private void InitializeBackgroundChangeTimer()
        {
            backgroundChangeTimer = new System.Timers.Timer(10000); // 60 sekund
            backgroundChangeTimer.Elapsed += (s, e) => Invoke((Action)(() =>
            {
                SetBackgroundImage();
                toggleBackground = !toggleBackground; // Zmiana flagi
            }));
            backgroundChangeTimer.AutoReset = true;
            backgroundChangeTimer.Start();
        }

        private void SetBackgroundImage()
        {
            // Lista dostępnych plików tła
            string[] backgroundPaths = new string[]
            {
                "background.jpg",
                "background2.jpg",
                "background3.jpg",
                "background4.jpg",
                "background5.jpg",
                "background6.jpg",
                "background7.jpg",
                "background8.jpg"
            };

            // Obliczenie aktualnego indeksu tła na podstawie flagi `toggleBackground`
            int currentIndex = Array.IndexOf(backgroundPaths, toggleBackground ? "background.jpg" : "background2.jpg");

            // Przejście do kolejnego tła
            currentIndex = (currentIndex + 0) % backgroundPaths.Length;

            // Ładowanie obrazu z zasobów
            string backgroundPath = backgroundPaths[currentIndex];
#pragma warning disable CS8600 // Converting null literal or possible null value to non-nullable type.
            using (Stream stream = Assembly.GetExecutingAssembly().GetManifestResourceStream($"GameLauncher.{backgroundPath}"))
            {
                if (stream != null)
                {
                    BackgroundImage = Image.FromStream(stream);
                    BackgroundImageLayout = ImageLayout.Stretch;
                    toggleBackground = currentIndex % 1 == 0;
                }
                else
                {
                    MessageBox.Show($"Obrazek tła {backgroundPath} nie został znaleziony.");
                }
            }
#pragma warning restore CS8600 // Converting null literal or possible null value to non-nullable type.
        }

        protected override void OnFormClosing(FormClosingEventArgs e)
        {
            backgroundChangeTimer?.Stop();
            backgroundChangeTimer?.Dispose();
            gameSettings.SaveSettings();
            base.OnFormClosing(e);
        }

        private void InitializeButtons()
        {
            flowLayoutPanel.Controls.Clear();

            for (int i = 0; i < gameSettings.GamePaths.Count; i++)
            {
                int currentIndex = i;
                Button gameButton = new Button
                {
                    Text = GetGameName(gameSettings.GamePaths[i]),
                    Size = new Size(150, 50),
                    Margin = new Padding(10)
                };

                // Dodajemy ikonę gry
                gameButton.Image = GetGameIcon(gameSettings.GamePaths[i]);
                gameButton.TextImageRelation = TextImageRelation.ImageBeforeText;

                // Obsługa kliknięcia przycisku
                gameButton.Click += (sender, e) => OnGameButtonClick(currentIndex);

                flowLayoutPanel.Controls.Add(gameButton);
            }

            // Dodajemy przycisk do dodawania nowych gier
            Button addGameButton = new Button
            {
                Text = "Dodaj grę",
                Size = new Size(150, 50),
                Margin = new Padding(10)
            };
            addGameButton.Click += AddMoreGames;
            flowLayoutPanel.Controls.Add(addGameButton);
        }

        private string GetGameName(string? gamePath)
        {
            if (string.IsNullOrEmpty(gamePath))
                return "Nieznana Gra";

            string fileName = Path.GetFileNameWithoutExtension(gamePath).ToLower();
            if (fileName.Contains("gta-sa"))
                return "SAMP";
            if (fileName.Contains("gta_sa"))
                return "GTA SA";
            if (fileName.Contains("mta"))
                return "MTA";

            return fileName;
        }

        private void AddMoreGames(object sender, EventArgs e)
        {
            if (gameSettings.GamePaths.Count < 24)
            {
                gameSettings.GamePaths.Add(null);
                InitializeButtons();
            }
            else
            {
                MessageBox.Show("Osiągnięto maksymalną liczbę gier.");
            }
        }

        private void OnGameButtonClick(int index)
        {
            if (index < 0 || index >= gameSettings.GamePaths.Count)
            {
                MessageBox.Show("Nieprawidłowy indeks przycisku gry.");
                return;
            }

            if (!string.IsNullOrEmpty(gameSettings.GamePaths[index]))
            {
                LaunchGame(gameSettings.GamePaths[index]);
            }
            else
            {
                OpenFileDialog openFileDialog = new OpenFileDialog
                {
                    Filter = "Pliki wykonywalne (*.exe, *.lnk)|*.exe;*.lnk",
                    Title = "Wybierz plik gry"
                };

                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    gameSettings.GamePaths[index] = openFileDialog.FileName;
                    InitializeButtons();
                }
            }
        }

        private void LaunchGame(string gamePath)
        {
            if (File.Exists(gamePath))
            {
                try
                {
                    Process.Start(gamePath);
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Błąd podczas uruchamiania gry: {ex.Message}");
                }
            }
            else
            {
                MessageBox.Show("Plik gry nie istnieje.");
            }
        }

        private Image? GetGameIcon(string gamePath)
        {
            if (string.IsNullOrEmpty(gamePath)) return null;

            string fileName = Path.GetFileNameWithoutExtension(gamePath).ToLower();
            if (fileName.Contains("gta-sa"))
                return LoadIconFromResource("samp.ico");
            if (fileName.Contains("gta_sa"))
                return LoadIconFromResource("gta_sa.ico");
            if (fileName.Contains("mta"))
                return LoadIconFromResource("mta.ico");

            return null;
        }

        private Image? LoadIconFromResource(string iconName)
        {
            try
            {
                using (Stream iconStream = Assembly.GetExecutingAssembly().GetManifestResourceStream($"GameLauncher.{iconName}"))
                {
                    return iconStream != null ? new Icon(iconStream).ToBitmap() : null;
                }
            }
            catch
            {
                return null;
            }
        }

        private void SetAppIcon()
        {
            using (Stream iconStream = Assembly.GetExecutingAssembly().GetManifestResourceStream("GameLauncher.gtasa.ico"))
            {
                if (iconStream != null)
                {
                    Icon = new Icon(iconStream);
                }
                else
                {
                    MessageBox.Show("Ikona aplikacji (gtasa.ico) nie została znaleziona.");
                }
            }
        }
    }
}


### Zawartość pliku: Form1.Designer.cs ###
﻿namespace GameLauncher
{
    partial class Form1
    {
        private System.ComponentModel.IContainer components = null;

        // Dodajemy ProgressBar
        private System.Windows.Forms.ProgressBar progressBarPythonInstall;

        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        private void InitializeComponent()
        {
            this.progressBarPythonInstall = new System.Windows.Forms.ProgressBar();
            this.SuspendLayout();
            // 
            // progressBarPythonInstall
            // 
            this.progressBarPythonInstall.Location = new System.Drawing.Point(12, 420);
            this.progressBarPythonInstall.Name = "progressBarPythonInstall";
            this.progressBarPythonInstall.Size = new System.Drawing.Size(776, 23);
            this.progressBarPythonInstall.TabIndex = 0;
            this.progressBarPythonInstall.Visible = false;
            // 
            // Form1
            // 
            this.ClientSize = new System.Drawing.Size(800, 450);
            this.Controls.Add(this.progressBarPythonInstall);
            this.Name = "Form1";
            this.Text = "GTA SA Launcher by klepek1337";
            this.ResumeLayout(false);

        }
    }
}


### Zawartość pliku: GameLauncher.csproj ###
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net9.0-windows</TargetFramework>
    <Nullable>enable</Nullable>
    <UseWindowsForms>true</UseWindowsForms>
    <ImplicitUsings>enable</ImplicitUsings>
    <PublishSingleFile>true</PublishSingleFile> <!-- Publikacja jako pojedynczy plik -->
    <ApplicationIcon>gtasa.ico</ApplicationIcon> <!-- Określenie ikony aplikacji -->
    <AssemblyName>gta-sa</AssemblyName> <!-- Zmieniamy nazwę pliku EXE -->
  </PropertyGroup>

  <ItemGroup>
    <!-- Osadzenie plików graficznych jako zasoby -->
    <EmbeddedResource Include="background.jpg" />
    <EmbeddedResource Include="gtasa.ico" />
    <EmbeddedResource Include="gta_sa.ico" /> <!-- Dodanie ikony gta_sa.ico -->
    <EmbeddedResource Include="mta.ico" /> <!-- Dodanie ikony mta.ico -->
    <EmbeddedResource Include="samp.ico" /> <!-- Dodanie ikony samp.ico -->
    <EmbeddedResource Include="background2.jpg" />
    <EmbeddedResource Include ="background3.jpg"/>
    <EmbeddedResource Include ="background4.jpg"/>
    <EmbeddedResource Include ="background5.jpg"/>
    <EmbeddedResource Include ="background6.jpg"/>
    <EmbeddedResource Include ="background7.jpg"/>
    <EmbeddedResource Include ="background8.jpg"/>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
  </ItemGroup>
</Project>


### Zawartość pliku: GameLauncher.csproj.user ###
﻿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="Current" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <ItemGroup>
        <Compile Update="Form1.cs">
            <SubType>Form</SubType>
        </Compile>
    </ItemGroup>
</Project>


### Zawartość pliku: GameLauncher.sln ###
﻿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.5.002.0
MinimumVisualStudioVersion = 10.0.40219.1
Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "GameLauncher", "GameLauncher.csproj", "{F52D4C5A-FFC7-4C91-A93F-073FDBC1BE51}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{F52D4C5A-FFC7-4C91-A93F-073FDBC1BE51}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{F52D4C5A-FFC7-4C91-A93F-073FDBC1BE51}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{F52D4C5A-FFC7-4C91-A93F-073FDBC1BE51}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{F52D4C5A-FFC7-4C91-A93F-073FDBC1BE51}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {B62CAAF8-7EC9-4573-8829-CEA0BF780799}
	EndGlobalSection
EndGlobal


### Zawartość pliku: GameSettings.cs ###
using System;
using System.Collections.Generic;
using System.IO;
using Newtonsoft.Json;

namespace GameLauncher
{
    public class GameSettings
    {
        public List<string> GamePaths { get; set; } = new List<string>();

        private const string SettingsFilePath = "gamesettings.json";

        // Metoda do zapisywania ustawień do pliku JSON
        public void SaveSettings()
        {
            try
            {
                var json = JsonConvert.SerializeObject(this, Formatting.Indented);
                File.WriteAllText(SettingsFilePath, json);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Błąd podczas zapisywania ustawień: {ex.Message}");
            }
        }

        // Metoda do ładowania ustawień z pliku JSON
        public static GameSettings LoadSettings()
        {
            try
            {
                if (File.Exists(SettingsFilePath))
                {
                    var json = File.ReadAllText(SettingsFilePath);
                    return JsonConvert.DeserializeObject<GameSettings>(json) ?? new GameSettings();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Błąd podczas ładowania ustawień: {ex.Message}");
            }
            return new GameSettings(); // Domyślnie pusty zestaw gier
        }
    }
}


### Zawartość pliku: Program.cs ###
using System;
using System.Windows.Forms;

namespace GameLauncher
{
    static class Program
    {
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new Form1());
        }
    }
}


