### Zawartość pliku: Form1.cs ###
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace GameLauncher
{
    public partial class Form1 : Form
    {
        private GameSettings gameSettings;

        public Form1()
        {
            InitializeComponent();

            // Ładujemy ustawienia gier z pliku
            gameSettings = GameSettings.LoadSettings();

            // Inicjalizujemy przyciski gier
            InitializeButtons();
        }

        // Funkcja do sprawdzania, czy Python jest zainstalowany
        private bool IsPythonInstalled()
        {
            try
            {
                Process.Start("python", "--version");
                return true; // Python jest zainstalowany
            }
            catch
            {
                return false; // Python nie jest zainstalowany
            }
        }

        // Funkcja do instalacji Pythona
        private void InstallPython()
        {
            string pythonInstallerUrl = "https://www.python.org/ftp/python/3.10.5/python-3.10.5-amd64.exe"; // Link do instalatora
            string installerPath = Path.Combine(Path.GetTempPath(), "python_installer.exe");

            try
            {
                progressBarPythonInstall.Style = ProgressBarStyle.Marquee;
                progressBarPythonInstall.Visible = true;

#pragma warning disable SYSLIB0014 // Type or member is obsolete
                using (var client = new WebClient())
                {
                    client.DownloadFile(pythonInstallerUrl, installerPath);
                }
#pragma warning restore SYSLIB0014 // Type or member is obsolete

                ProcessStartInfo processStartInfo = new ProcessStartInfo
                {
                    FileName = installerPath,
                    Arguments = "/quiet InstallAllUsers=1 PrependPath=1",
                    CreateNoWindow = true,
                    UseShellExecute = false
                };

                _ = Task.Run(() =>
                {
#pragma warning disable CS8600 // Converting null literal or possible null value to non-nullable type.
                    Process process = Process.Start(processStartInfo);
#pragma warning restore CS8600 // Converting null literal or possible null value to non-nullable type.
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                    process.WaitForExit();
#pragma warning restore CS8602 // Dereference of a possibly null reference.

                    Invoke(new Action(() =>
                    {
                        progressBarPythonInstall.Style = ProgressBarStyle.Blocks;
                        progressBarPythonInstall.Value = 100;

                        MessageBox.Show("Python został pomyślnie zainstalowany. Uruchom ponownie aplikację.");
                        Application.Exit();
                    }));
                });
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Błąd podczas instalacji Pythona: {ex.Message}");
            }
        }

        // Funkcja do ustawienia tła z pliku
        private void SetBackgroundImage()
        {
            string backgroundPath = Path.Combine(Application.StartupPath, "background.png");
            MessageBox.Show($"Ścieżka do tła: {backgroundPath}"); // Debugowanie ścieżki

            if (File.Exists(backgroundPath))
            {
                BackgroundImage = Image.FromFile(backgroundPath);
                BackgroundImageLayout = ImageLayout.Stretch;
            }
            else
            {
                MessageBox.Show("Obrazek tła nie został znaleziony.");
            }
        }

        // Inicjalizacja przycisków
        private void InitializeButtons()
        {
            Controls.Clear();

            for (int i = 0; i < gameSettings.GamePaths.Count; i++)
            {
                int currentIndex = i;
                Button gameButton = new Button
                {
                    Text = gameSettings.GamePaths[i] != null ? Path.GetFileNameWithoutExtension(gameSettings.GamePaths[i]) : $"Gra {i + 1}",
                    Location = new Point(50, 50 + (i * 60))
                };
                gameButton.Click += (sender, e) => OnGameButtonClick(currentIndex);
                Controls.Add(gameButton);
            }

            Button addGameButton = new Button
            {
                Text = "Dodaj grę",
                Location = new Point(50, 50 + (gameSettings.GamePaths.Count * 60) + 20)
            };
#pragma warning disable CS8622 // Nullability of reference types in type of parameter doesn't match the target delegate (possibly because of nullability attributes).
            addGameButton.Click += AddMoreGames;
#pragma warning restore CS8622 // Nullability of reference types in type of parameter doesn't match the target delegate (possibly because of nullability attributes).
            Controls.Add(addGameButton);
        }

        // Funkcja obsługująca kliknięcie przycisku gry
        private void OnGameButtonClick(int index)
        {
            if (index < 0 || index >= gameSettings.GamePaths.Count)
            {
                MessageBox.Show("Nieprawidłowy indeks przycisku gry.");
                return;
            }

            if (!string.IsNullOrEmpty(gameSettings.GamePaths[index]))
            {
                LaunchGame(gameSettings.GamePaths[index]);
            }
            else
            {
                OpenFileDialog openFileDialog = new OpenFileDialog
                {
                    Filter = "Pliki wykonywalne (*.exe, *.lnk)|*.exe;*.lnk",
                    Title = "Wybierz plik gry"
                };

                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    gameSettings.GamePaths[index] = openFileDialog.FileName;
                    InitializeButtons();

                    if (gameSettings.GamePaths[index]?.ToLower().EndsWith(".lnk") == true && !IsPythonInstalled())
                    {
                        InstallPython();
                    }
                }
            }
        }

        // Funkcja do dodania nowych gier
        private void AddMoreGames(object sender, EventArgs e)
        {
            if (gameSettings.GamePaths.Count < 5)
            {
#pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type.
                gameSettings.GamePaths.Add(null);
#pragma warning restore CS8625 // Cannot convert null literal to non-nullable reference type.
                InitializeButtons();
            }
            else
            {
                MessageBox.Show("Osiągnięto maksymalną liczbę gier.");
            }
        }

        // Funkcja do uruchamiania gry
        private void LaunchGame(string gamePath)
        {
            if (File.Exists(gamePath))
            {
                try
                {
                    if (gamePath.ToLower().EndsWith(".lnk"))
                    {
                        string pythonScript = Path.Combine(Path.GetTempPath(), "launch_game.py");
                        File.WriteAllText(pythonScript, $"import os\nos.startfile('{gamePath}')");
                        Process.Start("python", pythonScript);
                    }
                    else
                    {
                        Process.Start(gamePath);
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Błąd podczas uruchamiania gry: {ex.Message}");
                }
            }
            else
            {
                MessageBox.Show("Plik gry nie istnieje.");
            }
        }

        // Zapisujemy ustawienia przed zamknięciem aplikacji
        protected override void OnFormClosing(FormClosingEventArgs e)
        {
            gameSettings.SaveSettings();
            base.OnFormClosing(e);
        }
    }
}



### Zawartość pliku: Form1.Designer.cs ###
﻿namespace GameLauncher
{
    partial class Form1
    {
        private System.ComponentModel.IContainer components = null;

        // Dodajemy ProgressBar
        private System.Windows.Forms.ProgressBar progressBarPythonInstall;

        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        private void InitializeComponent()
        {
            this.progressBarPythonInstall = new System.Windows.Forms.ProgressBar();
            this.SuspendLayout();
            // 
            // progressBarPythonInstall
            // 
            this.progressBarPythonInstall.Location = new System.Drawing.Point(12, 420);
            this.progressBarPythonInstall.Name = "progressBarPythonInstall";
            this.progressBarPythonInstall.Size = new System.Drawing.Size(776, 23);
            this.progressBarPythonInstall.TabIndex = 0;
            this.progressBarPythonInstall.Visible = false;
            // 
            // Form1
            // 
            this.ClientSize = new System.Drawing.Size(800, 450);
            this.Controls.Add(this.progressBarPythonInstall);
            this.Name = "Form1";
            this.Text = "Game Launcher";
            this.ResumeLayout(false);
        }
    }
}


### Zawartość pliku: GameLauncher.csproj ###
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net9.0-windows</TargetFramework>
    <Nullable>enable</Nullable>
    <UseWindowsForms>true</UseWindowsForms>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>
  <ItemGroup>
    <EmbeddedResource Include="background.jpg" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
  </ItemGroup>
</Project>

### Zawartość pliku: GameLauncher.csproj.user ###
﻿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="Current" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <ItemGroup>
        <Compile Update="Form1.cs">
            <SubType>Form</SubType>
        </Compile>
    </ItemGroup>
</Project>


### Zawartość pliku: GameLauncher.sln ###
﻿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.5.002.0
MinimumVisualStudioVersion = 10.0.40219.1
Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "GameLauncher", "GameLauncher.csproj", "{F52D4C5A-FFC7-4C91-A93F-073FDBC1BE51}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{F52D4C5A-FFC7-4C91-A93F-073FDBC1BE51}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{F52D4C5A-FFC7-4C91-A93F-073FDBC1BE51}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{F52D4C5A-FFC7-4C91-A93F-073FDBC1BE51}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{F52D4C5A-FFC7-4C91-A93F-073FDBC1BE51}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {B62CAAF8-7EC9-4573-8829-CEA0BF780799}
	EndGlobalSection
EndGlobal


### Zawartość pliku: GameSettings.cs ###
using System;
using System.Collections.Generic;
using System.IO;
using Newtonsoft.Json;

namespace GameLauncher
{
    public class GameSettings
    {
        public List<string> GamePaths { get; set; } = new List<string>();

        private const string SettingsFilePath = "gamesettings.json";

        // Metoda do zapisywania ustawień do pliku JSON
        public void SaveSettings()
        {
            try
            {
                var json = JsonConvert.SerializeObject(this, Formatting.Indented);
                File.WriteAllText(SettingsFilePath, json);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Błąd podczas zapisywania ustawień: {ex.Message}");
            }
        }

        // Metoda do ładowania ustawień z pliku JSON
        public static GameSettings LoadSettings()
        {
            try
            {
                if (File.Exists(SettingsFilePath))
                {
                    var json = File.ReadAllText(SettingsFilePath);
                    return JsonConvert.DeserializeObject<GameSettings>(json) ?? new GameSettings();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Błąd podczas ładowania ustawień: {ex.Message}");
            }
            return new GameSettings(); // Domyślnie pusty zestaw gier
        }
    }
}


### Zawartość pliku: Program.cs ###
using System;
using System.Windows.Forms;

namespace GameLauncher
{
    static class Program
    {
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new Form1());
        }
    }
}


